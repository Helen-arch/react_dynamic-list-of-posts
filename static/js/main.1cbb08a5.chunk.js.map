{"version":3,"sources":["types/Fields.ts","components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/CommentsList.tsx","components/PostDetails.tsx","components/UserSelector.tsx","utils/fetchClient.ts","api/comments.ts","App.tsx","api/users.ts","api/posts.ts","index.tsx"],"names":["Fields","PostsList","posts","onPostSelect","selectedPost","className","map","post","isSelected","id","title","type","classNames","onClick","Loader","NewCommentForm","onAddComment","isSubmit","newComment","handleChangeField","commentError","reset","onSubmit","htmlFor","value","name","placeholder","errorName","onChange","event","target","Name","email","errorEmail","Email","body","errorBody","Body","CommentsList","comments","onCommentDelete","href","PostDetails","error","isLoading","isFormDisplayed","setIsFormDisplayed","commentsContent","length","newCommentButton","UserSelector","users","isDisplayed","setIsDisplayed","onUserSelect","selectedUser","onBlur","setTimeout","role","user","BASE_URL","wait","delay","Promise","resolve","request","url","method","data","options","JSON","stringify","headers","then","fetch","response","json","client","createComment","deleteComment","commentId","App","useState","setUsers","setSelectedUser","isDropdownMenu","setIsDropdownMenu","setPosts","setSelectedPost","setComments","isCommentsLoading","setIsCommentsLoading","isCommentSubmit","setIsCommentSubmit","setNewComment","setCommentError","setIsLoading","errorMessage","setErrorMessage","isPostsWarning","isPostsDisplayed","normalizedValue","trim","preparedComment","loadUsers","a","Error","loadPosts","useCallback","loadComments","postId","useEffect","preventDefault","prev","defaultComments","filter","comment","resetForm","field","ReactDOM","render","document","getElementById"],"mappings":"sMAAYA,E,gHCUCC,EAA6B,SAAC,GAAD,IACxCC,EADwC,EACxCA,MACAC,EAFwC,EAExCA,aACAC,EAHwC,EAGxCA,aAHwC,OAKxC,sBAAK,UAAQ,YAAb,UACE,mBAAGC,UAAU,QAAb,oBAEA,wBAAOA,UAAU,uDAAjB,UACE,gCACE,qBAAIA,UAAU,4BAAd,UACE,mCACA,uCACA,wCAIJ,gCACGH,EAAMI,KAAI,SAAAC,GACT,IAAMC,EAAaD,IAASH,EAE5B,OACE,qBAAI,UAAQ,OAAZ,UACE,oBAAI,UAAQ,SAAZ,SAAsBG,EAAKE,KAE3B,oBAAI,UAAQ,YAAZ,SACGF,EAAKG,QAGR,oBAAIL,UAAU,8BAAd,SACE,wBACEM,KAAK,SACL,UAAQ,aACRN,UAAWO,IAAW,iBAAkB,CACtC,YAAaJ,IAEfK,QAAS,kBAAMV,EAAaI,IAN9B,SAQGC,EAAa,QAAU,aAhBND,EAAKE,gBC9B5BK,G,MAAS,kBACpB,qBAAKT,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,yB,SFJPL,K,YAAAA,E,cAAAA,E,aAAAA,M,KGcL,IAAMe,EAAkC,SAAC,GAOzC,IANLC,EAMI,EANJA,aACAC,EAKI,EALJA,SACAC,EAII,EAJJA,WACAC,EAGI,EAHJA,kBACAC,EAEI,EAFJA,aACAC,EACI,EADJA,MAEA,OACE,uBACE,UAAQ,iBACRC,SAAUN,EAFZ,UAIE,sBAAKX,UAAU,QAAQ,UAAQ,YAA/B,UACE,uBAAOA,UAAU,QAAQkB,QAAQ,sBAAjC,yBAIA,sBAAKlB,UAAU,yCAAf,UACE,uBACEmB,MAAK,OAAEN,QAAF,IAAEA,OAAF,EAAEA,EAAYO,KACnBd,KAAK,OACLc,KAAK,OACLhB,GAAG,sBACHiB,YAAY,eACZrB,UAAWO,IAAW,QAAS,CAC7B,mBAAaQ,QAAb,IAAaA,OAAb,EAAaA,EAAcO,YAE7BC,SAAU,SAACC,GACTV,EAAkBU,EAAMC,OAAON,MAAOxB,EAAO+B,SAIjD,sBAAM1B,UAAU,wBAAhB,SACE,mBAAGA,UAAU,mBAGF,OAAZe,QAAY,IAAZA,OAAA,EAAAA,EAAcO,YACb,sBACEtB,UAAU,yCACV,UAAQ,YAFV,SAIE,mBAAGA,UAAU,sCAKN,OAAZe,QAAY,IAAZA,OAAA,EAAAA,EAAcO,YACb,mBAAGtB,UAAU,iBAAiB,UAAQ,eAAtC,iCAMJ,sBAAKA,UAAU,QAAQ,UAAQ,aAA/B,UACE,uBAAOA,UAAU,QAAQkB,QAAQ,uBAAjC,0BAIA,sBAAKlB,UAAU,yCAAf,UACE,uBACEmB,MAAK,OAAEN,QAAF,IAAEA,OAAF,EAAEA,EAAYc,MACnBrB,KAAK,OACLc,KAAK,QACLhB,GAAG,uBACHiB,YAAY,iBACZrB,UAAWO,IAAW,QAAS,CAC7B,mBAAaQ,QAAb,IAAaA,OAAb,EAAaA,EAAca,aAE7BL,SAAU,SAACC,GACTV,EAAkBU,EAAMC,OAAON,MAAOxB,EAAOkC,UAIjD,sBAAM7B,UAAU,wBAAhB,SACE,mBAAGA,UAAU,uBAGF,OAAZe,QAAY,IAAZA,OAAA,EAAAA,EAAca,aACb,sBACE5B,UAAU,yCACV,UAAQ,YAFV,SAIE,mBAAGA,UAAU,sCAKN,OAAZe,QAAY,IAAZA,OAAA,EAAAA,EAAca,aACb,mBAAG5B,UAAU,iBAAiB,UAAQ,eAAtC,kCAMJ,sBAAKA,UAAU,QAAQ,UAAQ,YAA/B,UACE,uBAAOA,UAAU,QAAQkB,QAAQ,eAAjC,0BAIA,qBAAKlB,UAAU,UAAf,SACE,0BACEmB,OAAiB,OAAVN,QAAU,IAAVA,OAAA,EAAAA,EAAYiB,OAAQ,GAC3B1B,GAAG,eACHgB,KAAK,OACLC,YAAY,oBACZrB,UAAWO,IAAW,WAAY,CAChC,mBAAaQ,QAAb,IAAaA,OAAb,EAAaA,EAAcgB,YAE7BR,SAAU,SAACC,GACTV,EAAkBU,EAAMC,OAAON,MAAOxB,EAAOqC,YAKtC,OAAZjB,QAAY,IAAZA,OAAA,EAAAA,EAAcgB,YACb,mBAAG/B,UAAU,iBAAiB,UAAQ,eAAtC,gCAMJ,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,UAAf,SACE,wBACEM,KAAK,SACLN,UAAWO,IAAW,iBAAkB,CACtC,aAAcK,IAHlB,mBAUF,qBAAKZ,UAAU,UAAf,SAEE,wBACEM,KAAK,QACLN,UAAU,0BACVQ,QAASQ,EAHX,4BC/IGiB,EAAgC,SAAC,GAAD,IAC3CC,EAD2C,EAC3CA,SACAC,EAF2C,EAE3CA,gBAF2C,OAI3C,qCACE,mBAAGnC,UAAU,aAAb,uBAECkC,EAASjC,KAAI,gBACZG,EADY,EACZA,GACAuB,EAFY,EAEZA,MACAP,EAHY,EAGZA,KACAU,EAJY,EAIZA,KAJY,OAMZ,0BAEE9B,UAAU,mBACV,UAAQ,UAHV,UAKE,sBAAKA,UAAU,iBAAf,UACE,mBACEoC,KAAI,iBAAYT,GAChB,UAAQ,gBAFV,SAIGP,IAGH,wBACE,UAAQ,gBACRd,KAAK,SACLN,UAAU,kBACV,aAAW,SACXQ,QAAS,kBAAM2B,EAAgB/B,IALjC,8BAUF,qBACEJ,UAAU,eACV,UAAQ,cAFV,SAIG8B,MA1BE1B,UCGAiC,EAA+B,SAAC,GActC,IAbLH,EAaI,EAbJA,SACAhC,EAYI,EAZJA,KACAoC,EAWI,EAXJA,MACAC,EAUI,EAVJA,UACA5B,EASI,EATJA,aACAC,EAQI,EARJA,SACAuB,EAOI,EAPJA,gBACAtB,EAMI,EANJA,WACAC,EAKI,EALJA,kBACAC,EAII,EAJJA,aACAyB,EAGI,EAHJA,gBACAC,EAEI,EAFJA,mBACAzB,EACI,EADJA,MAEM0B,EAAmBR,EAASS,OAM9B,cAAC,EAAD,CAAcT,SAAUA,EAAUC,gBAAiBA,IAJnD,mBAAGnC,UAAU,aAAa,UAAQ,oBAAlC,6BAME4C,GAAoBJ,GACxB,wBACE,UAAQ,qBACRlC,KAAK,SACLN,UAAU,iBACVQ,QAAS,kBAAMiC,GAAmB,IAJpC,6BAUF,OACE,qBAAKzC,UAAU,UAAU,UAAQ,cAAjC,SACE,sBAAKA,UAAU,UAAU,UAAQ,cAAjC,UACE,sBAAKA,UAAU,QAAf,UACE,oBAAI,UAAQ,YAAZ,oBACOE,EAAKE,GADZ,aACmBF,EAAKG,SAGxB,mBAAG,UAAQ,WAAX,SACGH,EAAK4B,UAIV,sBAAK9B,UAAU,QAAf,UACGuC,GAAa,cAAC,EAAD,IAEbD,GACC,qBAAKtC,UAAU,yBAAyB,UAAQ,gBAAhD,SACGsC,KAIHC,GACA,qCACGG,EACAE,QAMNJ,GACC,cAAC,EAAD,CACE7B,aAAcA,EACdC,SAAUA,EACVC,WAAYA,EACZC,kBAAmBA,EACnBC,aAAcA,EACdC,MAAOA,UCpFN6B,EAAgC,SAAC,GAMvC,IALLC,EAKI,EALJA,MACAC,EAII,EAJJA,YACAC,EAGI,EAHJA,eACAC,EAEI,EAFJA,aACAC,EACI,EADJA,aAEA,OACE,sBACE,UAAQ,eACRlD,UAAWO,IAAW,WAAY,CAChC,YAAawC,IAHjB,UAME,qBAAK/C,UAAU,mBAAf,SACE,yBACEM,KAAK,SACLN,UAAU,SACV,gBAAc,OACd,gBAAc,gBACdQ,QAAS,kBAAMwC,GAAgBD,IAC/BI,OAAQ,kBAAMC,YAAW,kBAAMJ,GAAe,KAAQ,MANxD,UAQE,+BAAOE,EAAeA,EAAa9B,KAAO,kBAE1C,sBAAMpB,UAAU,gBAAhB,SACE,mBAAGA,UAAU,oBAAoB,cAAY,gBAKnD,qBAAKA,UAAU,gBAAgBI,GAAG,gBAAgBiD,KAAK,OAAvD,SACE,qBAAKrD,UAAU,mBAAf,SACG8C,EAAM7C,KAAI,SAAAqD,GACT,OACE,mBAEElB,KAAI,gBAAWkB,EAAKlD,IACpBJ,UAAWO,IAAW,gBAAiB,CACrC,YAAa+C,IAASJ,IAExB1C,QAAS,kBAAMyC,EAAaK,IAN9B,SAQGA,EAAKlC,MAPDkC,EAAKlD,eChDpBmD,EAAW,oCAGjB,SAASC,EAAKC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GACjBP,WAAWO,EAASF,MAOxB,SAASG,EACPC,GAGa,IAFbC,EAEY,uDAFY,MACxBC,EACY,uDADA,KAENC,EAAuB,CAAEF,UAW/B,OATIC,IAEFC,EAAQlC,KAAOmC,KAAKC,UAAUH,GAC9BC,EAAQG,QAAU,CAChB,eAAgB,oCAKbX,EAAK,KACTY,MAAK,kBAAMC,MAAMd,EAAWM,EAAKG,MACjCI,MAAK,SAAAE,GAAQ,OAAIA,EAASC,UAGxB,IAAMC,EACN,SAAIX,GAAJ,OAAoBD,EAAWC,IADzBW,EAEL,SAAIX,EAAaE,GAAjB,OAA+BH,EAAWC,EAAK,OAAQE,IAFlDS,EAIH,SAACX,GAAD,OAAiBD,EAAQC,EAAK,WC9B3BY,EAAgB,SAAC5D,GAC5B,OAAO2D,EAAqB,YAAa3D,IAG9B6D,EAAgB,SAACC,GAC5B,OAAOH,EAAA,oBAA2BG,KCMvBC,EAAgB,WAC3B,MAA0BC,mBAAiB,IAA3C,mBAAO/B,EAAP,KAAcgC,EAAd,KACA,EAAwCD,mBAAsB,MAA9D,mBAAO3B,EAAP,KAAqB6B,EAArB,KACA,EAA4CF,oBAAS,GAArD,mBAAOG,EAAP,KAAuBC,EAAvB,KAEA,EAA0BJ,mBAAiB,IAA3C,mBAAOhF,EAAP,KAAcqF,EAAd,KACA,EAAwCL,mBAAsB,MAA9D,mBAAO9E,EAAP,KAAqBoF,EAArB,KAEA,EAAgCN,mBAAoB,IAApD,mBAAO3C,EAAP,KAAiBkD,EAAjB,KACA,EAAkDP,oBAAS,GAA3D,mBAAOQ,EAAP,KAA0BC,EAA1B,KACA,EAA8CT,oBAAS,GAAvD,mBAAOU,EAAP,KAAwBC,EAAxB,KAEA,EAA8CX,oBAAS,GAAvD,mBAAOrC,EAAP,KAAwBC,EAAxB,KACA,EAAoCoC,mBAA6B,MAAjE,mBAAOhE,GAAP,KAAmB4E,GAAnB,KACA,GAAwCZ,mBAA8B,MAAtE,qBAAO9D,GAAP,MAAqB2E,GAArB,MAEA,GAAkCb,oBAAS,GAA3C,qBAAOtC,GAAP,MAAkBoD,GAAlB,MACA,GAAwCd,mBAAiB,IAAzD,qBAAOe,GAAP,MAAqBC,GAArB,MAEMC,IAAkBjG,EAAM8C,QAAUO,IAAiBX,GACnDwD,GAAmBlG,EAAM8C,OAAS,IAAMJ,GAExCyD,GAAkB,SAAC7E,GAAD,cAAmBA,QAAnB,IAAmBA,OAAnB,EAAmBA,EAAO8E,QAE5CC,GAA+B,CACnC9E,KAAM4E,GAAe,OAACnF,SAAD,IAACA,QAAD,EAACA,GAAYO,MAClCO,MAAOqE,GAAe,OAACnF,SAAD,IAACA,QAAD,EAACA,GAAYc,OACnCG,KAAMkE,GAAe,OAACnF,SAAD,IAACA,QAAD,EAACA,GAAYiB,OAG9BqE,GAAS,uCAAG,4BAAAC,EAAA,+EC5CX5B,EAAmB,UD4CR,OAERT,EAFQ,OAIde,EAASf,GAJK,sDAMR,IAAIsC,MANI,yDAAH,qDAUTC,GAAYC,sBAAW,sBAAC,4BAAAH,EAAA,+EEvDPhG,EFyDQ,OAAC8C,QAAD,IAACA,OAAD,EAACA,EAAc9C,GExDvCoE,EAAA,wBAAoCpE,IFsDb,OAEpB2D,EAFoB,OAI1BmB,EAASnB,GAJiB,gDAM1B8B,GAAgB,yBANU,yBAQ1BF,IAAa,GARa,+CEvDR,IAACvF,IFuDO,0BAU3B,CAAC8C,IAEEsD,GAAeD,sBAAW,sBAAC,4BAAAH,EAAA,+EDnEPK,ECqEQ,OAAC1G,QAAD,IAACA,OAAD,EAACA,EAAcK,GDpE1CoE,EAAA,2BAA0CiC,ICkEhB,OAEvB1C,EAFuB,OAI7BqB,EAAYrB,GAJiB,gDAM7B8B,GAAgB,wBANa,yBAQ7BP,GAAqB,GARQ,+CDnER,IAACmB,ICmEO,0BAU9B,CAAC1G,IAEJ2G,qBAAU,WACRP,OACC,IAEHO,qBAAU,WACJxD,IACF2C,GAAgB,IAChBS,QAED,CAACpD,EAAcoD,KAElBI,qBAAU,WACJ3G,IACF8F,GAAgB,IAChBW,QAED,CAACzG,EAAcyG,KAElB,IAAM7F,GAAY,uCAAG,WACnBa,GADmB,eAAA4E,EAAA,yDAGnB5E,EAAMmF,iBACNjB,GAAgB,CACdpE,WAAY4E,GAAgB9E,KAC5BQ,YAAasE,GAAgBvE,MAC7BI,WAAYmE,GAAgBpE,SAG1BoE,GAAgB9E,MACf8E,GAAgBvE,OAChBuE,GAAgBpE,MAChB/B,GAbc,wBAcjByF,GAAmB,GAdF,kBAiBIf,EAAc,2BAC5ByB,IAD2B,IAE9BO,OAAM,OAAE1G,QAAF,IAAEA,OAAF,EAAEA,EAAcK,MAnBT,OAiBT2D,EAjBS,OAsBfqB,GAAY,SAAAwB,GAAI,4BAAQA,GAAR,CAAc7C,OAC9B0B,GAAc,2BAAK5E,IAAN,IAAiCiB,KAAM,MAvBrC,wDAyBT,IAAIuE,MAzBK,yBA2Bfb,GAAmB,GA3BJ,6EAAH,sDAgCZrD,GAAe,uCAAG,WAAOwC,GAAP,eAAAyB,EAAA,6DAChBS,EAAkB3E,EAExBkD,GAAY,SAAAwB,GAAI,OAAIA,EAAKE,QAAO,SAAAC,GAAO,OAAIA,EAAQ3G,KAAOuE,QAHpC,kBAKdD,EAAcC,GALA,uDAOpBS,EAAYyB,GAPQ,yDAAH,sDAWfG,GAAY,WAChBvB,GAAc,MACdC,GAAgB,OA6ClB,OACE,sBAAM1F,UAAU,UAAhB,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,iBAAf,SACE,sBAAKA,UAAU,+BAAf,UACE,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,CACE8C,MAAOA,EACPC,YAAaiC,EACbhC,eAAgBiC,EAChBhC,aA5BK,SAACK,GAChBJ,IAAiBI,IACnBqC,IAAa,GACbR,EAAgB,MAChBJ,EAAgBzB,IAGlB2B,GAAkB,IAsBJ/B,aAAcA,MAIlB,sBAAKlD,UAAU,QAAQ,UAAQ,cAA/B,WACIkD,GACA,mBAAG,UAAQ,iBAAX,8BAKDX,IAAa,cAAC,EAAD,IAEbqD,IACC,qBACE5F,UAAU,yBACV,UAAQ,oBAFV,mCAQD8F,IACC,qBACE9F,UAAU,0BACV,UAAQ,aAFV,0BAQD+F,IACC,cAAC,EAAD,CACElG,MAAOA,EACPC,aArDG,SAACI,GACpBoF,GAAqB,GACrB7C,GAAmB,GACnBuE,KACA7B,EAAgBpF,IAAiBG,EAAO,KAAOA,IAkD/BH,aAAcA,YAOxB,qBACE,UAAQ,UACRC,UAAWO,IACT,OACA,YACA,eACA,UAAW,CACT,gBAAiBR,IAPvB,SAWGA,GACC,qBAAKC,UAAU,gCAAf,SACE,cAAC,EAAD,CACEkC,SAAUA,EACVhC,KAAMH,EACNuC,MAAOsD,GACPrD,UAAW8C,EACX1E,aAAcA,GACdC,SAAU2E,EACVpD,gBAAiBA,GACjBtB,WAAYA,GACZC,kBAtHU,SACxBK,EACA8F,GAEA,OAAQA,GACN,KAAKtH,EAAO+B,KACV+D,GAAc,2BAAK5E,IAAN,IAAiCO,KAAMD,KACpDuE,GAAgB,2BAAK3E,IAAN,IAAoCO,WAAW,KAC9D,MAEF,KAAK3B,EAAOkC,MACV4D,GAAc,2BAAK5E,IAAN,IAAiCc,MAAOR,KACrDuE,GAAgB,2BAAK3E,IAAN,IAAoCa,YAAY,KAC/D,MAEF,KAAKjC,EAAOqC,KACVyD,GAAc,2BAAK5E,IAAN,IAAiCiB,KAAMX,KACpDuE,GAAgB,2BAAK3E,IAAN,IAAoCgB,WAAW,OAsGpDhB,aAAcA,GACdyB,gBAAiBA,EACjBC,mBAAoBA,EACpBzB,MAAOgG,iBG1QzBE,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.1cbb08a5.chunk.js","sourcesContent":["export enum Fields {\n  Name = 'Name',\n  Email = 'Email',\n  Body = 'Body',\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  onPostSelect: (post: Post) => void;\n  selectedPost: Post | null;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  onPostSelect,\n  selectedPost,\n}) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {posts.map(post => {\n          const isSelected = post === selectedPost;\n\n          return (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames('button is-link', {\n                    'is-light': !isSelected,\n                  })}\n                  onClick={() => onPostSelect(post)}\n                >\n                  {isSelected ? 'Close' : 'Open'}\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  </div>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Fields } from '../types/Fields';\nimport { CommentData, CommentError } from '../types/Comment';\n\ntype Props = {\n  onAddComment: (event: React.FormEvent<HTMLFormElement>) => void;\n  isSubmit: boolean;\n  newComment: CommentData | null;\n  handleChangeField: (value: string, field: keyof typeof Fields) => void;\n  commentError: CommentError | null;\n  reset: () => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  onAddComment,\n  isSubmit,\n  newComment,\n  handleChangeField,\n  commentError,\n  reset,\n}) => {\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={onAddComment}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            value={newComment?.name}\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', {\n              'is-danger': commentError?.errorName,\n            })}\n            onChange={(event) => {\n              handleChangeField(event.target.value, Fields.Name);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {commentError?.errorName && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {commentError?.errorName && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            value={newComment?.email}\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': commentError?.errorEmail,\n            })}\n            onChange={(event) => {\n              handleChangeField(event.target.value, Fields.Email);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {commentError?.errorEmail && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {commentError?.errorEmail && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            value={newComment?.body || ''}\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': commentError?.errorBody,\n            })}\n            onChange={(event) => {\n              handleChangeField(event.target.value, Fields.Body);\n            }}\n          />\n        </div>\n\n        {commentError?.errorBody && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': isSubmit,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={reset}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Comment } from '../types/Comment';\n\ntype Props = {\n  comments: Comment[];\n  onCommentDelete: (id: number) => void;\n};\n\nexport const CommentsList: React.FC<Props> = ({\n  comments,\n  onCommentDelete,\n}) => (\n  <>\n    <p className=\"title is-4\">Comments:</p>\n\n    {comments.map(({\n      id,\n      email,\n      name,\n      body,\n    }) => (\n      <article\n        key={id}\n        className=\"message is-small\"\n        data-cy=\"Comment\"\n      >\n        <div className=\"message-header\">\n          <a\n            href={`mailto:${email}`}\n            data-cy=\"CommentAuthor\"\n          >\n            {name}\n          </a>\n\n          <button\n            data-cy=\"CommentDelete\"\n            type=\"button\"\n            className=\"delete is-small\"\n            aria-label=\"delete\"\n            onClick={() => onCommentDelete(id)}\n          >\n            delete button\n          </button>\n        </div>\n        <div\n          className=\"message-body\"\n          data-cy=\"CommentBody\"\n        >\n          {body}\n        </div>\n      </article>\n    ))}\n  </>\n);\n","import React from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Comment, CommentData, CommentError } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { Fields } from '../types/Fields';\nimport { CommentsList } from './CommentsList';\n\ntype Props = {\n  comments: Comment[];\n  post: Post;\n  error: string;\n  isLoading: boolean;\n  onAddComment: (event: React.FormEvent<HTMLFormElement>) => void;\n  isSubmit: boolean;\n  onCommentDelete: (id: number) => void;\n  newComment: CommentData | null;\n  handleChangeField: (value: string, field: keyof typeof Fields) => void;\n  commentError: CommentError | null;\n  isFormDisplayed: boolean;\n  setIsFormDisplayed: (arg: boolean) => void;\n  reset: () => void;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  comments,\n  post,\n  error,\n  isLoading,\n  onAddComment,\n  isSubmit,\n  onCommentDelete,\n  newComment,\n  handleChangeField,\n  commentError,\n  isFormDisplayed,\n  setIsFormDisplayed,\n  reset,\n}) => {\n  const commentsContent = !comments.length\n    ? (\n      <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n        No comments yet\n      </p>\n    )\n    : <CommentsList comments={comments} onCommentDelete={onCommentDelete} />;\n\n  const newCommentButton = !isFormDisplayed && (\n    <button\n      data-cy=\"WriteCommentButton\"\n      type=\"button\"\n      className=\"button is-link\"\n      onClick={() => setIsFormDisplayed(true)}\n    >\n      Write a comment\n    </button>\n  );\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post.id}: ${post.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && <Loader />}\n\n          {error && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              {error}\n            </div>\n          )}\n\n          {!isLoading && (\n            <>\n              {commentsContent}\n              {newCommentButton}\n            </>\n          )}\n\n        </div>\n\n        {isFormDisplayed && (\n          <NewCommentForm\n            onAddComment={onAddComment}\n            isSubmit={isSubmit}\n            newComment={newComment}\n            handleChangeField={handleChangeField}\n            commentError={commentError}\n            reset={reset}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React from 'react';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[];\n  isDisplayed: boolean;\n  setIsDisplayed: (arg: boolean) => void;\n  onUserSelect: (user: User) => void;\n  selectedUser: User | null;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  isDisplayed,\n  setIsDisplayed,\n  onUserSelect,\n  selectedUser,\n}) => {\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', {\n        'is-active': isDisplayed,\n      })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsDisplayed(!isDisplayed)}\n          onBlur={() => setTimeout(() => setIsDisplayed(false), 150)}\n        >\n          <span>{selectedUser ? selectedUser.name : 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => {\n            return (\n              <a\n                key={user.id}\n                href={`#user-${user.id}`}\n                className={classNames('dropdown-item', {\n                  'is-active': user === selectedUser,\n                })}\n                onClick={() => onUserSelect(user)}\n              >\n                {user.name}\n              </a>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (postId: number | undefined) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const createComment = (newComment: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', newComment);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { getUsers } from './api/users';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { Comment, CommentData, CommentError } from './types/Comment';\nimport { getPosts } from './api/posts';\nimport { createComment, deleteComment, getComments } from './api/comments';\nimport { Fields } from './types/Fields';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [isDropdownMenu, setIsDropdownMenu] = useState(false);\n\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isCommentsLoading, setIsCommentsLoading] = useState(true);\n  const [isCommentSubmit, setIsCommentSubmit] = useState(false);\n\n  const [isFormDisplayed, setIsFormDisplayed] = useState(false);\n  const [newComment, setNewComment] = useState<CommentData | null>(null);\n  const [commentError, setCommentError] = useState<CommentError | null>(null);\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState<string>('');\n\n  const isPostsWarning = !posts.length && selectedUser && !isLoading;\n  const isPostsDisplayed = posts.length > 0 && !isLoading;\n\n  const normalizedValue = (value: string) => value?.trim();\n\n  const preparedComment: CommentData = {\n    name: normalizedValue(newComment?.name as string),\n    email: normalizedValue(newComment?.email as string),\n    body: normalizedValue(newComment?.body as string),\n  };\n\n  const loadUsers = async () => {\n    try {\n      const data = await getUsers();\n\n      setUsers(data);\n    } catch (error) {\n      throw new Error();\n    }\n  };\n\n  const loadPosts = useCallback(async () => {\n    try {\n      const data = await getPosts(selectedUser?.id);\n\n      setPosts(data);\n    } catch (error) {\n      setErrorMessage('Something went wrong!');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [selectedUser]);\n\n  const loadComments = useCallback(async () => {\n    try {\n      const data = await getComments(selectedPost?.id);\n\n      setComments(data);\n    } catch (error) {\n      setErrorMessage('Something went wrong');\n    } finally {\n      setIsCommentsLoading(false);\n    }\n  }, [selectedPost]);\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  useEffect(() => {\n    if (selectedUser) {\n      setErrorMessage('');\n      loadPosts();\n    }\n  }, [selectedUser, loadPosts]);\n\n  useEffect(() => {\n    if (selectedPost) {\n      setErrorMessage('');\n      loadComments();\n    }\n  }, [selectedPost, loadComments]);\n\n  const onAddComment = async (\n    event: React.FormEvent<HTMLFormElement>,\n  ) => {\n    event.preventDefault();\n    setCommentError({\n      errorName: !preparedComment.name,\n      errorEmail: !preparedComment.email,\n      errorBody: !preparedComment.body,\n    });\n\n    if (preparedComment.name\n      && preparedComment.email\n      && preparedComment.body\n      && selectedPost) {\n      setIsCommentSubmit(true);\n\n      try {\n        const data = await createComment({\n          ...preparedComment,\n          postId: selectedPost?.id,\n        });\n\n        setComments(prev => [...prev, data]);\n        setNewComment({ ...newComment as CommentData, body: '' });\n      } catch (error) {\n        throw new Error();\n      } finally {\n        setIsCommentSubmit(false);\n      }\n    }\n  };\n\n  const onCommentDelete = async (commentId: number) => {\n    const defaultComments = comments;\n\n    setComments(prev => prev.filter(comment => comment.id !== commentId));\n    try {\n      await deleteComment(commentId);\n    } catch (error) {\n      setComments(defaultComments);\n    }\n  };\n\n  const resetForm = () => {\n    setNewComment(null);\n    setCommentError(null);\n  };\n\n  const handleChangeField = (\n    value: string,\n    field: keyof typeof Fields,\n  ) => {\n    switch (field) {\n      case Fields.Name:\n        setNewComment({ ...newComment as CommentData, name: value });\n        setCommentError({ ...commentError as CommentError, errorName: false });\n        break;\n\n      case Fields.Email:\n        setNewComment({ ...newComment as CommentData, email: value });\n        setCommentError({ ...commentError as CommentError, errorEmail: false });\n        break;\n\n      case Fields.Body:\n        setNewComment({ ...newComment as CommentData, body: value });\n        setCommentError({ ...commentError as CommentError, errorBody: false });\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const onUserSelect = (user: User) => {\n    if (selectedUser !== user) {\n      setIsLoading(true);\n      setSelectedPost(null);\n      setSelectedUser(user);\n    }\n\n    setIsDropdownMenu(false);\n  };\n\n  const onPostSelect = (post: Post) => {\n    setIsCommentsLoading(true);\n    setIsFormDisplayed(false);\n    resetForm();\n    setSelectedPost(selectedPost === post ? null : post);\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  isDisplayed={isDropdownMenu}\n                  setIsDisplayed={setIsDropdownMenu}\n                  onUserSelect={onUserSelect}\n                  selectedUser={selectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && <Loader />}\n\n                {errorMessage && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {isPostsWarning && (\n                  <div\n                    className=\"notification is-warning\"\n                    data-cy=\"NoPostsYet\"\n                  >\n                    No posts yet\n                  </div>\n                )}\n\n                {isPostsDisplayed && (\n                  <PostsList\n                    posts={posts}\n                    onPostSelect={onPostSelect}\n                    selectedPost={selectedPost}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar', {\n                'Sidebar--open': selectedPost,\n              },\n            )}\n          >\n            {selectedPost && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  comments={comments}\n                  post={selectedPost}\n                  error={errorMessage}\n                  isLoading={isCommentsLoading}\n                  onAddComment={onAddComment}\n                  isSubmit={isCommentSubmit}\n                  onCommentDelete={onCommentDelete}\n                  newComment={newComment}\n                  handleChangeField={handleChangeField}\n                  commentError={commentError}\n                  isFormDisplayed={isFormDisplayed}\n                  setIsFormDisplayed={setIsFormDisplayed}\n                  reset={resetForm}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (id: number | undefined) => {\n  return client.get<Post[]>(`/posts?userId=${id}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}